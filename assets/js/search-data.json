{
  
    
        "post0": {
            "title": "Exploring Titanic Dataset",
            "content": ". Overview The data has been split into two groups:training set (train.csv) test set (test.csv) . collapse-hide . Survival Survival 0 = No, 1 = Yes pclass Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd sex Sex Age Age in years sibsp # of siblings / spouses aboard the Titanic parch # of parents / children aboard the Titanic ticket Ticket number fare Passenger fare cabin Cabin number embarked Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton . 1.Reading data . import pandas as pd . train = pd.read_csv(&#39;train.csv&#39;) . train[&#39;Pclass&#39;].nunique() . 3 . train[&#39;Age&#39;].mean() . 29.69911764705882 . train[&#39;Age&#39;].isnull().sum() . 177 . test = pd.read_csv(&#39;test.csv&#39;) . train[&#39;Fare&#39;]. max() . 512.3292 . train[&#39;Embarked&#39;].value_counts() . S 644 C 168 Q 77 Name: Embarked, dtype: int64 . train[&#39;Parch&#39;].value_counts() . 0 678 1 118 2 80 3 5 5 5 4 4 6 1 Name: Parch, dtype: int64 . train.groupby(&#39;Survived&#39;, as_index=False)[&#39;Fare&#39;].mean() . Survived Fare . 0 0 | 22.117887 | . 1 1 | 48.395408 | . 2.EDA . train.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . test.head() . PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 892 | 3 | Kelly, Mr. James | male | 34.5 | 0 | 0 | 330911 | 7.8292 | NaN | Q | . 1 893 | 3 | Wilkes, Mrs. James (Ellen Needs) | female | 47.0 | 1 | 0 | 363272 | 7.0000 | NaN | S | . 2 894 | 2 | Myles, Mr. Thomas Francis | male | 62.0 | 0 | 0 | 240276 | 9.6875 | NaN | Q | . 3 895 | 3 | Wirz, Mr. Albert | male | 27.0 | 0 | 0 | 315154 | 8.6625 | NaN | S | . 4 896 | 3 | Hirvonen, Mrs. Alexander (Helga E Lindqvist) | female | 22.0 | 1 | 1 | 3101298 | 12.2875 | NaN | S | . train.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . test.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 418 entries, 0 to 417 Data columns (total 11 columns): PassengerId 418 non-null int64 Pclass 418 non-null int64 Name 418 non-null object Sex 418 non-null object Age 332 non-null float64 SibSp 418 non-null int64 Parch 418 non-null int64 Ticket 418 non-null object Fare 417 non-null float64 Cabin 91 non-null object Embarked 418 non-null object dtypes: float64(2), int64(4), object(5) memory usage: 36.0+ KB . train dataset has 12 columns and test dataset has 11 columns with survived missing . 3.Data Visualization . import matplotlib.pyplot as plt %matplotlib inline import seaborn as sns sns.set() . def barchart(column): survived = train[train[&#39;Survived&#39;]==1][column].value_counts() dead = train[train[&#39;Survived&#39;]==0][column].value_counts() df = pd.DataFrame([survived,dead]) df.index = [&#39;Survived&#39;,&#39;Dead&#39;] df.plot(kind = &#39;bar&#39;, stacked = True, figsize = (8,4)) . barchart(&#39;Sex&#39;) . Male is more likely to be dead Female more likely to survive . barchart(&#39;Pclass&#39;) . Class 1 More likely to be Survived Class 2 Equal chance(from graph) Class 3 More likely dead . barchart(&#39;SibSp&#39;) . barchart(&#39;Parch&#39;) . A Person aboarded with more than 2 parents or children more likely survived A Person aboarded alone more likely dead . barchart(&#39;Embarked&#39;) . A Person aboarded from C slightly more likely survived A Person aboarded from Q more likely dead A Person aboarded from S more likely dead . 4.Feature Engineering . 1.Name . train[&#39;Name&#39;] . 0 Braund, Mr. Owen Harris 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 2 Heikkinen, Miss. Laina 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 4 Allen, Mr. William Henry ... 886 Montvila, Rev. Juozas 887 Graham, Miss. Margaret Edith 888 Johnston, Miss. Catherine Helen &#34;Carrie&#34; 889 Behr, Mr. Karl Howell 890 Dooley, Mr. Patrick Name: Name, Length: 891, dtype: object . traintestdata = [train,test] . for dataset in traintestdata: dataset[&#39;Title&#39;] = dataset[&#39;Name&#39;].str.extract(&#39; ([A-Za-z]+) .&#39;,expand = False) . train[&#39;Title&#39;].value_counts() . Mr 517 Miss 182 Mrs 125 Master 40 Dr 7 Rev 6 Mlle 2 Major 2 Col 2 Jonkheer 1 Sir 1 Ms 1 Capt 1 Lady 1 Mme 1 Countess 1 Don 1 Name: Title, dtype: int64 . title_mapping = {&quot;Mr&quot;:0, &quot;Miss&quot;:1, &quot;Mrs&quot;:2, &quot;Master&quot;:3, &quot;Dr&quot;:3, &quot;Rev&quot; :3, &quot;Major&quot;:3, &quot;Mlle&quot;:3, &quot;Col&quot;:3, &quot;Lady&quot;:3, &quot;Countess&quot;:3, &quot;Sir&quot;:3, &quot;Jonkheer&quot;:3, &quot;Mme&quot;:3, &quot;Ms&quot;:3, &quot;Capt&quot;:3, &quot;Don&quot;:3,} . for dataset in traintestdata: dataset[&#39;Title&#39;] = dataset[&#39;Title&#39;].map(title_mapping) . train.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | . 1 | 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 2 | . 2 | 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 1 | . 3 | 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | 2 | . 4 | 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | 0 | . Title map Mr : 0 Miss : 1 Mrs: 2 Others: 3 . train.Title.value_counts() . 0 517 1 182 2 125 3 67 Name: Title, dtype: int64 . barchart(&#39;Title&#39;) . title with Mr. more likely died title mrs and ms more likely survived . train.drop(&#39;Name&#39;, axis=1, inplace=True) test.drop(&#39;Name&#39;, axis=1, inplace=True) . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | . 1 | 2 | 1 | 1 | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 2 | . 2 | 3 | 1 | 3 | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 1 | . 3 | 4 | 1 | 1 | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | 2 | . 4 | 5 | 0 | 3 | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | 0 | . test.head() . PassengerId Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 892 | 3 | male | 34.5 | 0 | 0 | 330911 | 7.8292 | NaN | Q | 0.0 | . 1 | 893 | 3 | female | 47.0 | 1 | 0 | 363272 | 7.0000 | NaN | S | 2.0 | . 2 | 894 | 2 | male | 62.0 | 0 | 0 | 240276 | 9.6875 | NaN | Q | 0.0 | . 3 | 895 | 3 | male | 27.0 | 0 | 0 | 315154 | 8.6625 | NaN | S | 0.0 | . 4 | 896 | 3 | female | 22.0 | 1 | 1 | 3101298 | 12.2875 | NaN | S | 2.0 | . 2.Sex . sex_mapping = {&quot;male&quot;: 0, &quot;female&quot;: 1} for dataset in traintestdata: dataset[&#39;Sex&#39;] = dataset[&#39;Sex&#39;].map(sex_mapping) . male: 0 female: 1 . barchart(&#39;Sex&#39;) . female more likely to survive male more likely to die . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | 0 | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | . 1 | 2 | 1 | 1 | 1 | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 2 | . 2 | 3 | 1 | 3 | 1 | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 1 | . 3 | 4 | 1 | 1 | 1 | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | 2 | . 4 | 5 | 0 | 3 | 0 | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | 0 | . test.head() . PassengerId Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 892 | 3 | 0 | 34.5 | 0 | 0 | 330911 | 7.8292 | NaN | Q | 0.0 | . 1 | 893 | 3 | 1 | 47.0 | 1 | 0 | 363272 | 7.0000 | NaN | S | 2.0 | . 2 | 894 | 2 | 0 | 62.0 | 0 | 0 | 240276 | 9.6875 | NaN | Q | 0.0 | . 3 | 895 | 3 | 0 | 27.0 | 0 | 0 | 315154 | 8.6625 | NaN | S | 0.0 | . 4 | 896 | 3 | 1 | 22.0 | 1 | 1 | 3101298 | 12.2875 | NaN | S | 2.0 | . 4.Age . test[&quot;Age&quot;].isnull().sum() . 86 . train[&quot;Age&quot;].isnull().sum() . 177 . train[&quot;Age&quot;].fillna(train.groupby(&quot;Title&quot;)[&quot;Age&quot;].transform(&quot;median&quot;), inplace=True) test[&quot;Age&quot;].fillna(test.groupby(&quot;Title&quot;)[&quot;Age&quot;].transform(&quot;median&quot;), inplace=True) . train[&quot;Age&quot;].isnull().sum() . 0 . test[&quot;Age&quot;].isnull().sum() . 0 . barchart(&#39;Age&#39;) . . for dataset in traintestdata: dataset.loc[ dataset[&#39;Age&#39;] &lt;= 16, &#39;Age&#39;] = 0, dataset.loc[(dataset[&#39;Age&#39;] &gt; 16) &amp; (dataset[&#39;Age&#39;] &lt;= 26), &#39;Age&#39;] = 1, dataset.loc[(dataset[&#39;Age&#39;] &gt; 26) &amp; (dataset[&#39;Age&#39;] &lt;= 36), &#39;Age&#39;] = 2, dataset.loc[(dataset[&#39;Age&#39;] &gt; 36) &amp; (dataset[&#39;Age&#39;] &lt;= 62), &#39;Age&#39;] = 3, dataset.loc[ dataset[&#39;Age&#39;] &gt; 62, &#39;Age&#39;] = 4 . barchart(&#39;Age&#39;) . age less than 16 more likely survived age bwn 16 and 26 more likely dead age bwn 26 and 36 more likely dead age bwn 36 and 62 more likely dead age more than 62 more likely dead . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | 0 | 1.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | . 1 | 2 | 1 | 1 | 1 | 3.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 2 | . 2 | 3 | 1 | 3 | 1 | 1.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 1 | . 3 | 4 | 1 | 1 | 1 | 2.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | 2 | . 4 | 5 | 0 | 3 | 0 | 2.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | 0 | . 5.Embarked . Pclass1 = train[train[&#39;Pclass&#39;]==1][&#39;Embarked&#39;].value_counts() Pclass2 = train[train[&#39;Pclass&#39;]==2][&#39;Embarked&#39;].value_counts() Pclass3 = train[train[&#39;Pclass&#39;]==3][&#39;Embarked&#39;].value_counts() . df = pd.DataFrame([Pclass1, Pclass2, Pclass3]) df.index = [&#39;1st class&#39;,&#39;2nd class&#39;, &#39;3rd class&#39;] df.plot(kind=&#39;bar&#39;,stacked=True, figsize=(10,5)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x271b20ab948&gt; . all classes mostly embarked is from s(southhampton) . for dataset in traintestdata: dataset[&#39;Embarked&#39;] = dataset[&#39;Embarked&#39;].fillna(&#39;S&#39;) . embarked_mapping = {&quot;S&quot;: 0, &quot;C&quot;: 1, &quot;Q&quot;: 2} for dataset in traintestdata: dataset[&#39;Embarked&#39;] = dataset[&#39;Embarked&#39;].map(embarked_mapping) . 5.Fare . train[&quot;Fare&quot;].fillna(train.groupby(&quot;Pclass&quot;)[&quot;Fare&quot;].transform(&quot;median&quot;), inplace=True) test[&quot;Fare&quot;].fillna(test.groupby(&quot;Pclass&quot;)[&quot;Fare&quot;].transform(&quot;median&quot;), inplace=True) . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | 0 | 1.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | 0 | 0 | . 1 | 2 | 1 | 1 | 1 | 3.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | 1 | 2 | . 2 | 3 | 1 | 3 | 1 | 1.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | 0 | 1 | . 3 | 4 | 1 | 1 | 1 | 2.0 | 1 | 0 | 113803 | 53.1000 | C123 | 0 | 2 | . 4 | 5 | 0 | 3 | 0 | 2.0 | 0 | 0 | 373450 | 8.0500 | NaN | 0 | 0 | . for dataset in traintestdata: dataset.loc[ dataset[&#39;Fare&#39;] &lt;= 17, &#39;Fare&#39;] = 0, dataset.loc[(dataset[&#39;Fare&#39;] &gt; 17) &amp; (dataset[&#39;Fare&#39;] &lt;= 30), &#39;Fare&#39;] = 1, dataset.loc[(dataset[&#39;Fare&#39;] &gt; 30) &amp; (dataset[&#39;Fare&#39;] &lt;= 100), &#39;Fare&#39;] = 2, dataset.loc[ dataset[&#39;Fare&#39;] &gt; 100, &#39;Fare&#39;] = 3 . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | 0 | 1.0 | 1 | 0 | A/5 21171 | 0.0 | NaN | 0 | 0 | . 1 | 2 | 1 | 1 | 1 | 3.0 | 1 | 0 | PC 17599 | 2.0 | C85 | 1 | 2 | . 2 | 3 | 1 | 3 | 1 | 1.0 | 0 | 0 | STON/O2. 3101282 | 0.0 | NaN | 0 | 1 | . 3 | 4 | 1 | 1 | 1 | 2.0 | 1 | 0 | 113803 | 2.0 | C123 | 0 | 2 | . 4 | 5 | 0 | 3 | 0 | 2.0 | 0 | 0 | 373450 | 0.0 | NaN | 0 | 0 | . 6.Cabin . for dataset in traintestdata: dataset[&#39;Cabin&#39;] = dataset[&#39;Cabin&#39;].str[:1] . Pclass1 = train[train[&#39;Pclass&#39;]==1][&#39;Cabin&#39;].value_counts() Pclass2 = train[train[&#39;Pclass&#39;]==2][&#39;Cabin&#39;].value_counts() Pclass3 = train[train[&#39;Pclass&#39;]==3][&#39;Cabin&#39;].value_counts() df = pd.DataFrame([Pclass1, Pclass2, Pclass3]) df.index = [&#39;1st class&#39;,&#39;2nd class&#39;, &#39;3rd class&#39;] df.plot(kind=&#39;bar&#39;,stacked=True, figsize=(10,5)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x271b312ae48&gt; . cabin_mapping = {&quot;A&quot;: 0, &quot;B&quot;: 0.4, &quot;C&quot;: 0.8, &quot;D&quot;: 1.2, &quot;E&quot;: 1.6, &quot;F&quot;: 2, &quot;G&quot;: 2.4, &quot;T&quot;: 2.8} for dataset in traintestdata: dataset[&#39;Cabin&#39;] = dataset[&#39;Cabin&#39;].map(cabin_mapping) . train[&quot;Cabin&quot;].fillna(train.groupby(&quot;Pclass&quot;)[&quot;Cabin&quot;].transform(&quot;median&quot;), inplace=True) test[&quot;Cabin&quot;].fillna(test.groupby(&quot;Pclass&quot;)[&quot;Cabin&quot;].transform(&quot;median&quot;), inplace=True) . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title . 0 | 1 | 0 | 3 | 0 | 1.0 | 1 | 0 | A/5 21171 | 0.0 | 2.0 | 0 | 0 | . 1 | 2 | 1 | 1 | 1 | 3.0 | 1 | 0 | PC 17599 | 2.0 | 0.8 | 1 | 2 | . 2 | 3 | 1 | 3 | 1 | 1.0 | 0 | 0 | STON/O2. 3101282 | 0.0 | 2.0 | 0 | 1 | . 3 | 4 | 1 | 1 | 1 | 2.0 | 1 | 0 | 113803 | 2.0 | 0.8 | 0 | 2 | . 4 | 5 | 0 | 3 | 0 | 2.0 | 0 | 0 | 373450 | 0.0 | 2.0 | 0 | 0 | . 7.Familiy size . train[&quot;FamilySize&quot;] = train[&quot;SibSp&quot;] + train[&quot;Parch&quot;] + 1 test[&quot;FamilySize&quot;] = test[&quot;SibSp&quot;] + test[&quot;Parch&quot;] + 1 . train.head() . PassengerId Survived Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title FamilySize . 0 | 1 | 0 | 3 | 0 | 1.0 | 1 | 0 | A/5 21171 | 0.0 | 2.0 | 0 | 0 | 2 | . 1 | 2 | 1 | 1 | 1 | 3.0 | 1 | 0 | PC 17599 | 2.0 | 0.8 | 1 | 2 | 2 | . 2 | 3 | 1 | 3 | 1 | 1.0 | 0 | 0 | STON/O2. 3101282 | 0.0 | 2.0 | 0 | 1 | 1 | . 3 | 4 | 1 | 1 | 1 | 2.0 | 1 | 0 | 113803 | 2.0 | 0.8 | 0 | 2 | 2 | . 4 | 5 | 0 | 3 | 0 | 2.0 | 0 | 0 | 373450 | 0.0 | 2.0 | 0 | 0 | 1 | . family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4} for dataset in traintestdata: dataset[&#39;FamilySize&#39;] = dataset[&#39;FamilySize&#39;].map(family_mapping) . test.head() . PassengerId Pclass Sex Age SibSp Parch Ticket Fare Cabin Embarked Title FamilySize . 0 | 892 | 3 | 0 | 2.0 | 0 | 0 | 330911 | 0.0 | 2.0 | 2 | 0.0 | 0.0 | . 1 | 893 | 3 | 1 | 3.0 | 1 | 0 | 363272 | 0.0 | 2.0 | 0 | 2.0 | 0.4 | . 2 | 894 | 2 | 0 | 3.0 | 0 | 0 | 240276 | 0.0 | 2.0 | 2 | 0.0 | 0.0 | . 3 | 895 | 3 | 0 | 2.0 | 0 | 0 | 315154 | 0.0 | 2.0 | 0 | 0.0 | 0.0 | . 4 | 896 | 3 | 1 | 1.0 | 1 | 1 | 3101298 | 0.0 | 2.0 | 0 | 2.0 | 0.8 | . features_drop = [&#39;Ticket&#39;, &#39;SibSp&#39;, &#39;Parch&#39;] train = train.drop(features_drop, axis=1) test = test.drop(features_drop, axis=1) train = train.drop([&#39;PassengerId&#39;], axis=1) . train_data = train.drop(&#39;Survived&#39;, axis=1) target = train[&#39;Survived&#39;] train_data.shape, target.shape . ((891, 8), (891,)) . train_data.head(10) . Pclass Sex Age Fare Cabin Embarked Title FamilySize . 0 | 3 | 0 | 1.0 | 0.0 | 2.0 | 0 | 0 | 0.4 | . 1 | 1 | 1 | 3.0 | 2.0 | 0.8 | 1 | 2 | 0.4 | . 2 | 3 | 1 | 1.0 | 0.0 | 2.0 | 0 | 1 | 0.0 | . 3 | 1 | 1 | 2.0 | 2.0 | 0.8 | 0 | 2 | 0.4 | . 4 | 3 | 0 | 2.0 | 0.0 | 2.0 | 0 | 0 | 0.0 | . 5 | 3 | 0 | 2.0 | 0.0 | 2.0 | 2 | 0 | 0.0 | . 6 | 1 | 0 | 3.0 | 2.0 | 1.6 | 0 | 0 | 0.0 | . 7 | 3 | 0 | 0.0 | 1.0 | 2.0 | 0 | 3 | 1.6 | . 8 | 3 | 1 | 2.0 | 0.0 | 2.0 | 0 | 2 | 0.8 | . 9 | 2 | 1 | 0.0 | 2.0 | 1.8 | 1 | 2 | 0.4 | . train[&quot;Title&quot;].fillna(train.groupby(&quot;Age&quot;)[&quot;Title&quot;].transform(&quot;median&quot;), inplace=True) test[&quot;Title&quot;].fillna(test.groupby(&quot;Age&quot;)[&quot;Title&quot;].transform(&quot;median&quot;), inplace=True) . Modelling . from sklearn.neighbors import KNeighborsClassifier from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier from sklearn.naive_bayes import GaussianNB from sklearn.svm import SVC import numpy as np . 1.Cross Validation (K-fold) . from sklearn.model_selection import KFold from sklearn.model_selection import cross_val_score k_fold = KFold(n_splits=10, shuffle=True, random_state=0) . 1.1 kNN . clf = KNeighborsClassifier(n_neighbors = 13) scoring = &#39;accuracy&#39; score = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring) print(score) . [0.82222222 0.76404494 0.80898876 0.83146067 0.87640449 0.82022472 0.85393258 0.79775281 0.84269663 0.84269663] . round(np.mean(score)*100, 2) . 82.6 . 1.2 Decision Tree . clf = DecisionTreeClassifier() scoring = &#39;accuracy&#39; score = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring) print(score) . [0.76666667 0.82022472 0.76404494 0.7752809 0.88764045 0.76404494 0.84269663 0.82022472 0.74157303 0.78651685] . round(np.mean(score)*100, 2) . 79.69 . 1.3 Naive Bayes . clf = GaussianNB() scoring = &#39;accuracy&#39; score = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring) print(score) . [0.85555556 0.73033708 0.75280899 0.75280899 0.70786517 0.80898876 0.76404494 0.80898876 0.86516854 0.83146067] . round(np.mean(score)*100, 2) . 78.78 . 1.4 SVM . clf = SVC() scoring = &#39;accuracy&#39; score = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring) print(score) . C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) . [0.83333333 0.80898876 0.83146067 0.82022472 0.84269663 0.82022472 0.84269663 0.85393258 0.83146067 0.86516854] . C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) . round(np.mean(score)*100,2) . 83.5 . 1.5 Random Forrest Generator . clf = RandomForestClassifier(n_estimators=13) scoring = &#39;accuracy&#39; score = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring) print(score) . [0.8 0.83146067 0.83146067 0.7752809 0.87640449 0.78651685 0.79775281 0.80898876 0.74157303 0.80898876] . round(np.mean(score)*100, 2) . 80.58 . 6.Testing . clf = SVC() clf.fit(train_data, target) test_data = test.drop(&quot;PassengerId&quot;, axis=1).copy() prediction = clf.predict(test_data) . C: ProgramData Anaconda3 lib site-packages sklearn svm base.py:193: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &#34;avoid this warning.&#34;, FutureWarning) . submission = pd.DataFrame({ &quot;PassengerId&quot;: test[&quot;PassengerId&quot;], &quot;Survived&quot;: prediction }) submission.to_csv(&#39;submission.csv&#39;, index=False) . submission = pd.read_csv(&#39;submission.csv&#39;) submission.head() . PassengerId Survived . 0 | 892 | 0 | . 1 | 893 | 1 | . 2 | 894 | 0 | . 3 | 895 | 0 | . 4 | 896 | 1 | .",
            "url": "https://jithinharidas.github.io/paranormal-distributions/2021/04/20/Exploring-Titanic-Dataset.html",
            "relUrl": "/2021/04/20/Exploring-Titanic-Dataset.html",
            "date": " • Apr 20, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Jithin K Haridas . . I specialise in Advanced Analytics, a combination of exploratory data analysis, prescriptive and predictive analytics leveraging techniques across areas like statistical modelling, data mining, machine learning, text analytics. . .",
          "url": "https://jithinharidas.github.io/paranormal-distributions/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jithinharidas.github.io/paranormal-distributions/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}